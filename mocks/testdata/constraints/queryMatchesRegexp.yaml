- name: WHEN request query matches queryMatchesRegexp constraint check MUST be successful
  method: GET
  path: /test/case
  query: "{{ $query }}"
  response:
    200: "result"
  mocks:
    someservice:
      requestConstraints:
        - kind: queryMatchesRegexp
          query: ?people=2&food=tea&food=cake
      strategy: constant
      body: "result"
      statusCode: 200
  cases:
    - variables:
        # expected
        query: people=2&food=tea&food=cake
    - variables:
        # different order (1)
        query: food=tea&food=cake&people=2
    - variables:
        # different order (2)
        query: food=cake&food=tea&people=2
    - variables:
        # different order (3)
        query: people=2&food=cake&food=tea
    - variables:
        # unexpected keys are ignored
        query: food=cake&food=tea&people=2&one-more=person

- name: WHEN request query matches queryMatchesRegexp with regexp constraint check MUST be successful
  method: GET
  path: /test/case
  query: "{{ $query }}"
  response:
    200: "result"
  mocks:
    someservice:
      requestConstraints:
        - kind: queryMatchesRegexp
          query: ?food=cake&food=$matchRegexp(\w+)&people=$matchRegexp(\d+)
      strategy: constant
      body: "result"
      statusCode: 200
  cases:
    - variables:
        # expected
        query: people=2&food=tea&food=cake
    - variables:
        # different order (1)
        query: food=tea&food=cake&people=2
    - variables:
        # different order (2)
        query: food=cake&food=tea&people=2
    - variables:
        # different order (3)
        query: people=2&food=cake&food=tea
    - variables:
        # unexpected keys are ignored
        query: food=cake&food=tea&people=2&one-more=person

- name: WHEN one of expected key absent in query queryMatchesRegexp MUST fail with error
  method: GET
  path: /test/case
  query: food=cake&food=tea
  response:
    200: "result"
  mocks:
    someservice:
      requestConstraints:
        - kind: queryMatchesRegexp
          query: ?people=2&food=tea&food=cake
      strategy: constant
      body: "result"
      statusCode: 200
  meta:
    expected: |
       1) mock 'someservice': request constraint 'queryMatchesRegexp': 'people' parameter is missing in request query

- name: WHEN one of expected values absent in query queryMatchesRegexp MUST fail with error
  method: GET
  path: /test/case
  query: food=cake&food=beer&people=3
  response:
    200: "result"
  mocks:
    someservice:
      requestConstraints:
        - kind: queryMatchesRegexp
          query: ?people=3&food=beer
      strategy: constant
      body: "result"
      statusCode: 200
  meta:
    expected: |
       1) mock 'someservice': request constraint 'queryMatchesRegexp': number of values for parameter 'food' is not equal to expected:
            expected: [beer cake]
              actual: [beer]

- name: WHEN one of expected key has other value in query queryMatchesRegexp MUST fail with error
  method: GET
  path: /test/case
  query: food=cake&food=beer&people=3
  response:
    200: "result"
  mocks:
    someservice:
      requestConstraints:
        - kind: queryMatchesRegexp
          query: ?people=2&food=$matchRegexp(^c.*$)&food=tea
      strategy: constant
      body: "result"
      statusCode: 200
  meta:
    expected: |
       1) mock 'someservice': request constraint 'queryMatchesRegexp': parameter 'food': values do not match:
            expected: tea
              actual: beer
       2) mock 'someservice': request constraint 'queryMatchesRegexp': parameter 'people': values do not match:
            expected: 2
              actual: 3

- name: queryMatchesRegexp constraint MUST support expectedQuery for backward compatibility (1)
  method: GET
  path: /test/case
  query: "people=2&food=tea&food=cake"
  response:
    200: "result"
  mocks:
    someservice:
      requestConstraints:
        - kind: queryMatchesRegexp
          expectedQuery: ?food=cake&food=$matchRegexp(\w+)&people=$matchRegexp(\d+)
      strategy: constant
      body: "result"
      statusCode: 200

- name: queryMatchesRegexp constraint MUST support expectedQuery for backward compatibility (2)
  method: GET
  path: /test/case
  query: food=cake&food=beer&people=3
  response:
    200: "result"
  mocks:
    someservice:
      requestConstraints:
        - kind: queryMatchesRegexp
          expectedQuery: ?people=3&food=beer
      strategy: constant
      body: "result"
      statusCode: 200
  meta:
    expected: |
       1) mock 'someservice': request constraint 'queryMatchesRegexp': number of values for parameter 'food' is not equal to expected:
            expected: [beer cake]
              actual: [beer]
