- name: WHEN request body matches specified pattern bodyMatchesJSON MUST be successful
  method: POST
  path: /test/case
  request: >
    {
      "param": "value",
      "otherparam": "value"
    }
  response:
    200: result
  mocks:
    someservice:
      requestConstraints:
        - kind: bodyMatchesJSON
          body: >
            {
              "param": "value"
            }
      strategy: constant
      body: result
      statusCode: 200

- name: bodyMatchesJSON MUST support comparisonParams
  method: POST
  path: /test/case
  request: >
    {
      "param": "value1",
      "otherparam": "value2"
    }
  response:
    200: result
  mocks:
    someservice:
      requestConstraints:
        - kind: bodyMatchesJSON
          body: '{"param":"ignored","otherparam":"ignored"}'
          comparisonParams:
            ignoreValues: true
      strategy: constant
      body: result
      statusCode: 200

- name: WHEN request body is empty bodyMatchesJSON MUST fail with error
  method: POST
  path: /test/case
  request: ""
  response:
    200: result
  mocks:
    someservice:
      requestConstraints:
        - kind: bodyMatchesJSON
          body: >
            {
              "param": "value"
            }
      strategy: constant
      body: result
      statusCode: 200
  meta:
    expected: |
       1) mock 'someservice': request constraint 'bodyMatchesJSON': request is empty

- name: WHEN request body is not json bodyMatchesJSON MUST fail with error
  method: POST
  path: /test/case
  request: "invalid"
  response:
    200: result
  mocks:
    someservice:
      requestConstraints:
        - kind: bodyMatchesJSON
          body: >
            {
              "param": "value"
            }
      strategy: constant
      body: result
      statusCode: 200
  meta:
    expected: |
       1) mock 'someservice': request constraint 'bodyMatchesJSON': json: invalid character 'i' looking for beginning of value
